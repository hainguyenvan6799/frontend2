{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects_User\\\\lucky\\\\full_project\\\\frontend\\\\src\\\\components\\\\page\\\\Admin\\\\ThamGiaPhongChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\"; // import adddictional components\n\nimport { ChatEngine, getOrCreateChat } from \"react-chat-engine\";\nimport PeopleSetting from \"./PeopleSetting\";\nimport { chat_projectid, giaimadulieu, private_key_chatroom } from \"../security\";\nimport { userContext } from \"../../../Store\";\nimport Header from \"../../basic_components/Header\";\nimport Footer from \"../../basic_components/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar axios = require(\"axios\");\n\nrequire(\"dotenv\").config();\n\nfunction ThamGiaPhongChat(props) {\n  _s();\n\n  const direct_chat_email = props.match.params.email;\n  const [user] = React.useContext(userContext);\n  const mountedRef = useRef(true);\n  const email_encoded = localStorage.getItem(\"email\");\n  const password_encoded = localStorage.getItem(\"password\");\n  const email_decoded = giaimadulieu(email_encoded);\n  const password_decoded = giaimadulieu(password_encoded);\n  const [userIDChat, setUserIDChat] = React.useState(null);\n\n  const get_user_id_chat = async () => {\n    try {\n      var config = {\n        method: \"get\",\n        url: \"https://api.chatengine.io/users/\",\n        headers: {\n          \"PRIVATE-KEY\": private_key_chatroom\n        }\n      };\n      const response = await axios(config);\n\n      if (response.status === 200) {\n        if (!mountedRef.current) return null;\n        response.data.map(item => item.username === user.email ? setUserIDChat(item.id) : null);\n      }\n    } catch (err) {\n      if (!mountedRef.current) return null;\n      console.log(\"Something went wrong\");\n    }\n  };\n\n  const updateState = callback => {\n    callback();\n  };\n\n  React.useEffect(() => {\n    updateState(get_user_id_chat);\n    return () => {\n      mountedRef.current = false;\n      setUserIDChat(null);\n    };\n  }, [user.email]); // const connect_to_other = async (email) => {\n  //   const config = {\n  //     method: \"put\",\n  //     url: \"https://api.chatengine.io/chats/\",\n  //     headers: {\n  //       \"Project-ID\": chat_projectid,\n  //       \"User-Name\": email_decoded,\n  //       \"User-Secret\": password_decoded,\n  //     },\n  //     data: {\n  //       usernames: [email],\n  //       is_direct_chat: true,\n  //     },\n  //   };\n  //   const response = await axios(config);\n  //   return response;\n  // };\n  // React.useEffect(() => {\n  //   if (direct_chat_email !== undefined) {\n  //     connect_to_other(direct_chat_email);\n  //   }\n  //   return () => {};\n  // }, []);\n\n  const renderChatForm = creds => {\n    console.log(creds);\n    getOrCreateChat(creds, {\n      is_direct_chat: true,\n      usernames: [direct_chat_email],\n      title: direct_chat_email\n    }, () => console.log(direct_chat_email));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), user.name !== \"\" && userIDChat !== null ? direct_chat_email === undefined ? /*#__PURE__*/_jsxDEV(ChatEngine, {\n      height: \"100vh\" // projectID={chatConfig[\"Project-ID\"]}\n      // userName={chatConfig[\"User-Name\"]}\n      // userSecret={chatConfig[\"User-Secret\"]}\n      ,\n      projectID: chat_projectid,\n      userName: email_decoded,\n      userSecret: password_decoded,\n      renderPeopleSettings: (creds, chat) => {\n        return /*#__PURE__*/_jsxDEV(PeopleSetting, {\n          creds: creds,\n          chat: chat,\n          user: user,\n          userIDChat: userIDChat,\n          username: email_decoded,\n          password: password_decoded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(ChatEngine, {\n      height: \"100vh\" // projectID={chatConfig[\"Project-ID\"]}\n      // userName={chatConfig[\"User-Name\"]}\n      // userSecret={chatConfig[\"User-Secret\"]}\n      ,\n      projectID: chat_projectid,\n      userName: email_decoded,\n      userSecret: password_decoded,\n      renderNewChatForm: creds => renderChatForm(creds)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }, this) : \"... Loading ...\", /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ThamGiaPhongChat, \"fgrwG26GsCRMKaXhKpLeqp6PyEY=\");\n\n_c = ThamGiaPhongChat;\nexport default ThamGiaPhongChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThamGiaPhongChat\");","map":{"version":3,"sources":["C:/Projects_User/lucky/full_project/frontend/src/components/page/Admin/ThamGiaPhongChat.js"],"names":["React","useRef","ChatEngine","getOrCreateChat","PeopleSetting","chat_projectid","giaimadulieu","private_key_chatroom","userContext","Header","Footer","axios","require","config","ThamGiaPhongChat","props","direct_chat_email","match","params","email","user","useContext","mountedRef","email_encoded","localStorage","getItem","password_encoded","email_decoded","password_decoded","userIDChat","setUserIDChat","useState","get_user_id_chat","method","url","headers","response","status","current","data","map","item","username","id","err","console","log","updateState","callback","useEffect","renderChatForm","creds","is_direct_chat","usernames","title","name","undefined","chat"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\r\n// import adddictional components\r\nimport { ChatEngine, getOrCreateChat } from \"react-chat-engine\";\r\nimport PeopleSetting from \"./PeopleSetting\";\r\n\r\nimport {\r\n  chat_projectid,\r\n  giaimadulieu,\r\n  private_key_chatroom,\r\n} from \"../security\";\r\n\r\nimport { userContext } from \"../../../Store\";\r\nimport Header from \"../../basic_components/Header\";\r\nimport Footer from \"../../basic_components/Footer\";\r\nvar axios = require(\"axios\");\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nfunction ThamGiaPhongChat(props) {\r\n  const direct_chat_email = props.match.params.email;\r\n  const [user] = React.useContext(userContext);\r\n  const mountedRef = useRef(true);\r\n\r\n  const email_encoded = localStorage.getItem(\"email\");\r\n  const password_encoded = localStorage.getItem(\"password\");\r\n\r\n  const email_decoded = giaimadulieu(email_encoded);\r\n  const password_decoded = giaimadulieu(password_encoded);\r\n\r\n  const [userIDChat, setUserIDChat] = React.useState(null);\r\n\r\n  const get_user_id_chat = async () => {\r\n    try {\r\n      var config = {\r\n        method: \"get\",\r\n        url: \"https://api.chatengine.io/users/\",\r\n        headers: {\r\n          \"PRIVATE-KEY\": private_key_chatroom,\r\n        },\r\n      };\r\n\r\n      const response = await axios(config);\r\n      if (response.status === 200) {\r\n        if (!mountedRef.current) return null;\r\n        response.data.map((item) =>\r\n          item.username === user.email ? setUserIDChat(item.id) : null\r\n        );\r\n      }\r\n    } catch (err) {\r\n      if (!mountedRef.current) return null;\r\n      console.log(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const updateState = (callback) => {\r\n    callback();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    updateState(get_user_id_chat);\r\n\r\n    return () => {\r\n      mountedRef.current = false;\r\n      setUserIDChat(null);\r\n    };\r\n  }, [user.email]);\r\n\r\n  // const connect_to_other = async (email) => {\r\n  //   const config = {\r\n  //     method: \"put\",\r\n  //     url: \"https://api.chatengine.io/chats/\",\r\n  //     headers: {\r\n  //       \"Project-ID\": chat_projectid,\r\n  //       \"User-Name\": email_decoded,\r\n  //       \"User-Secret\": password_decoded,\r\n  //     },\r\n  //     data: {\r\n  //       usernames: [email],\r\n  //       is_direct_chat: true,\r\n  //     },\r\n  //   };\r\n\r\n  //   const response = await axios(config);\r\n  //   return response;\r\n  // };\r\n\r\n  // React.useEffect(() => {\r\n  //   if (direct_chat_email !== undefined) {\r\n  //     connect_to_other(direct_chat_email);\r\n  //   }\r\n\r\n  //   return () => {};\r\n  // }, []);\r\n\r\n  const renderChatForm = (creds) => {\r\n    console.log(creds);\r\n    getOrCreateChat(\r\n      creds,\r\n      {\r\n        is_direct_chat: true,\r\n        usernames: [direct_chat_email],\r\n        title: direct_chat_email,\r\n      },\r\n      () => console.log(direct_chat_email)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      {user.name !== \"\" && userIDChat !== null ? (\r\n        direct_chat_email === undefined ? (\r\n          <ChatEngine\r\n            height=\"100vh\"\r\n            // projectID={chatConfig[\"Project-ID\"]}\r\n            // userName={chatConfig[\"User-Name\"]}\r\n            // userSecret={chatConfig[\"User-Secret\"]}\r\n            projectID={chat_projectid}\r\n            userName={email_decoded}\r\n            userSecret={password_decoded}\r\n            renderPeopleSettings={(creds, chat) => {\r\n              return (\r\n                <PeopleSetting\r\n                  creds={creds}\r\n                  chat={chat}\r\n                  user={user}\r\n                  userIDChat={userIDChat}\r\n                  username={email_decoded}\r\n                  password={password_decoded}\r\n                />\r\n              );\r\n            }}\r\n          />\r\n        ) : (\r\n          <ChatEngine\r\n            height=\"100vh\"\r\n            // projectID={chatConfig[\"Project-ID\"]}\r\n            // userName={chatConfig[\"User-Name\"]}\r\n            // userSecret={chatConfig[\"User-Secret\"]}\r\n            projectID={chat_projectid}\r\n            userName={email_decoded}\r\n            userSecret={password_decoded}\r\n            renderNewChatForm={(creds) => renderChatForm(creds)}\r\n          />\r\n        )\r\n      ) : (\r\n        \"... Loading ...\"\r\n      )}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThamGiaPhongChat;\r\n"]},"metadata":{},"sourceType":"module"}