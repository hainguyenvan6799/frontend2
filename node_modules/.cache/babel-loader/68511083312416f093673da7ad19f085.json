{"ast":null,"code":"export const CryptoJS = require(\"crypto-js\");\n\nrequire('dotenv').config();\n\nexport const CryptoJSAesJson = {\n  /**\r\n   * Encrypt any value\r\n   * @param {*} value\r\n   * @param {string} password\r\n   * @return {string}\r\n   */\n  'encrypt': function (value, password) {\n    return CryptoJS.AES.encrypt(JSON.stringify(value), password, {\n      format: CryptoJSAesJson\n    }).toString();\n  },\n\n  /**\r\n   * Decrypt a previously encrypted value\r\n   * @param {string} jsonStr\r\n   * @param {string} password\r\n   * @return {*}\r\n   */\n  'decrypt': function (jsonStr, password) {\n    return JSON.parse(CryptoJS.AES.decrypt(jsonStr, password, {\n      format: CryptoJSAesJson\n    }).toString(CryptoJS.enc.Utf8));\n  },\n\n  /**\r\n   * Stringify cryptojs data\r\n   * @param {Object} cipherParams\r\n   * @return {string}\r\n   */\n  'stringify': function (cipherParams) {\n    var j = {\n      ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64)\n    };\n    if (cipherParams.iv) j.iv = cipherParams.iv.toString();\n    if (cipherParams.salt) j.s = cipherParams.salt.toString();\n    return JSON.stringify(j).replace(/\\s/g, '');\n  },\n\n  /**\r\n   * Parse cryptojs data\r\n   * @param {string} jsonStr\r\n   * @return {*}\r\n   */\n  'parse': function (jsonStr) {\n    var j = JSON.parse(jsonStr);\n    var cipherParams = CryptoJS.lib.CipherParams.create({\n      ciphertext: CryptoJS.enc.Base64.parse(j.ct)\n    });\n    if (j.iv) cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);\n    if (j.s) cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);\n    return cipherParams;\n  }\n};\nexport const chat_projectid = process.env.REACT_APP_CHAT_PROJECTID;\nexport const private_key_chatroom = process.env.REACT_APP_PrivateKey_ChatRoom;\nexport const key = process.env.REACT_APP_KeyAdminOnly;\nexport const mahoadulieu_postform = value => {\n  return CryptoJSAesJson.encrypt(value, key);\n};\nexport const giaimadulieu = value => {\n  return CryptoJSAesJson.decrypt(value, key);\n};","map":{"version":3,"sources":["C:/Projects_User/lucky/full_project/frontend/src/components/page/security.js"],"names":["CryptoJS","require","config","CryptoJSAesJson","value","password","AES","encrypt","JSON","stringify","format","toString","jsonStr","parse","decrypt","enc","Utf8","cipherParams","j","ct","ciphertext","Base64","iv","salt","s","replace","lib","CipherParams","create","Hex","chat_projectid","process","env","REACT_APP_CHAT_PROJECTID","private_key_chatroom","REACT_APP_PrivateKey_ChatRoom","key","REACT_APP_KeyAdminOnly","mahoadulieu_postform","giaimadulieu"],"mappings":"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","sourcesContent":["export const CryptoJS = require(\"crypto-js\");\r\nrequire('dotenv').config()\r\n\r\nexport const CryptoJSAesJson = {\r\n    /**\r\n     * Encrypt any value\r\n     * @param {*} value\r\n     * @param {string} password\r\n     * @return {string}\r\n     */\r\n    'encrypt': function (value, password) {\r\n        return CryptoJS.AES.encrypt(JSON.stringify(value), password, { format: CryptoJSAesJson }).toString()\r\n    },\r\n    /**\r\n     * Decrypt a previously encrypted value\r\n     * @param {string} jsonStr\r\n     * @param {string} password\r\n     * @return {*}\r\n     */\r\n    'decrypt': function (jsonStr, password) {\r\n        return JSON.parse(CryptoJS.AES.decrypt(jsonStr, password, { format: CryptoJSAesJson }).toString(CryptoJS.enc.Utf8))\r\n    },\r\n    /**\r\n     * Stringify cryptojs data\r\n     * @param {Object} cipherParams\r\n     * @return {string}\r\n     */\r\n    'stringify': function (cipherParams) {\r\n        var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) }\r\n        if (cipherParams.iv) j.iv = cipherParams.iv.toString()\r\n        if (cipherParams.salt) j.s = cipherParams.salt.toString()\r\n        return JSON.stringify(j).replace(/\\s/g, '')\r\n    },\r\n    /**\r\n     * Parse cryptojs data\r\n     * @param {string} jsonStr\r\n     * @return {*}\r\n     */\r\n    'parse': function (jsonStr) {\r\n        var j = JSON.parse(jsonStr)\r\n        var cipherParams = CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Base64.parse(j.ct) })\r\n        if (j.iv) cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv)\r\n        if (j.s) cipherParams.salt = CryptoJS.enc.Hex.parse(j.s)\r\n        return cipherParams\r\n    }\r\n}\r\n\r\nexport const chat_projectid = process.env.REACT_APP_CHAT_PROJECTID;\r\n\r\nexport const private_key_chatroom = process.env.REACT_APP_PrivateKey_ChatRoom;\r\n\r\nexport const key = process.env.REACT_APP_KeyAdminOnly;\r\n\r\nexport const mahoadulieu_postform = (value) => {\r\n    return CryptoJSAesJson.encrypt(value, key)\r\n}\r\n\r\nexport const giaimadulieu = (value) => {\r\n    return CryptoJSAesJson.decrypt(value, key);\r\n}"]},"metadata":{},"sourceType":"module"}